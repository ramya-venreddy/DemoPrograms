# Any of these properties can be overridden by passing them through the command line.

# There are three groups of properties.  The first group has to do with giving Jenny access to the database.
# The second group has to do with generating the code that will access the database.
# The last group has to do with variations of specific tables.


#####################################################################################################
####                                                                                              ###
####                             Giving Jenny Access to your Database                             ###
####                                                                                              ###
#####################################################################################################

# The name of the driver class that is used in the Class.forName() method to load the driver.
#
# This is used by Jenny to get meta data like the table names.
#
# This property is required.
#
# Driver=com.inet.tds.TdsDriver
# Driver=com.mysql.jdbc.Driver

Driver=com.mysql.jdbc.Driver

# The URL that is passed into the DriverManager.getConnection() method to get a connection.
#
# This is used by Jenny to get meta data like the table names.
#
# This property is required.
#
# URL=jdbc:driver://hostname/databasename
# URL=jdbc:mysql://localhost/soup

URL=jdbc:mysql://localhost/soup

# Some databases require a user name and password to get access.  If your database requires this, you must provide
# that information here.  Otherwise, it's best to leave it out.
#
# UserName=databaseusername
# Password=databaseuserpassword
#
# UserName=webapp
# Password=frootloops
#
# UserName=bobjones
# Password=bluegoat
#
# UserName=megacorp
# Password=spoooooon



# What brand of database are we dealing with?  Different databases have different kinds of goofiness to deal with.
#
# Jenny usually works pretty good if you don't specify, but if things are weird, it can help to
# provide this tidbit of information.
#
# If you are using Oracle, you probably want to make sure you specify so.
#
# Brand=Oracle
# Brand=MySQL
# Brand=SqlServer
# Brand=Sybase
# Brand=Postgres


#####################################################################################################
####                                                                                              ###
####                          Generating code for using your Database                             ###
####                                                                                              ###
#####################################################################################################


# Where the generated files will be put.
#
# Everything in this directory will be deleted when Jenny starts and then the generated facade class and all the
# generated table classes will be created here.
#
# Make sure you include the trailing slash.
#
# This property is required.
#
# Destination=/java/src/com/javaranch/db/soup/
# Destination=/work/src/com/megacorp/projectx/database/accountsdb/

Destination=/java/src/com/javaranch/db/soup/

# The package name to use at the top of all the generated files.
#
# This property is required.
#
# Package=com.javaranch.db.soup
# Package=com.megacorp.projectx.database.accountsdb

Package=com.javaranch.db.soup

# The name of the generated facade class.
#
# This is the name of the class that will extend DBFacade and use your means of database access to override DBFacade.
# All of the generated table classes will use this facade for all database access.
#
# Any instance of a database server will one or more databases in it.  Typically, a large project would have six to ten
# databases.  I suggest that for each database, you have a different package and facade.
#
# Example:
#
#     Suppose you have three databases on a server:  "primary", "transactions" and "legacy".  You would want to run Jenny
#     three times, with three different property files and put the tables of each database into three packages.
#     Something like com.megacorp.db.primary, com.megacorp.db.transactions and com.megacorp.db.legacy. The facades would
#     be PrimaryFacade, TransactionsFacade and LegacyFacade.
#
# It's also possible that you have one database that you access within EJB's and outside of EJB's.  One way to handle
# this would be to override the facade for one way and to set the instance to the new way.  Everything within one VM
# would then use the new way, and everything that ran in another VM would use the default way.  Or, you could get your
# own connection and feed that in to each method.  Or (and this is my point) you could run Jenny twice.  Once for stuff
# inside of EJB's and once for stuff outside of EJB's.
#
# Example:
#
#     Suppose you have a database called "moo".  Most of your database access is going to be done within the EJB stff,
#     so you set up a package called com.farmcorp.ejb.db.moo and call your facade "MooFacade".  Then for the standalone
#     utilities you write that work with the same data, you use the package com.farmcorp.tools.db.moo and call your
#     facade "MooFacade".  Or maybe "ToolsFacade" in the com.farmcorp.tools.db package.
#
# This property is required.
#
# Facade=SoupFacade
# Facade=LegacyFacade
# Facade=PrimaryFacade

Facade=SoupFacade

# Now you need to specify how your facade accesses the database.
#
# There are two general ways to get a database connection:
#
#       Load a driver class and use that to get a connection (usually for stuff outside of EJB).
#
#             For this, provide FacadeDriver, FacadeURL and optionally FacadeUserName and FacadePassword.
#
#       Use a JNDI call to get a datasource (usually for stuff inside of EJB).
#
#             For this, provide FacadeJNDI
#
# If you don't specify FacadeDriver, the following properties will be copied:
#
#                   Driver      would be copied to    FacadeDriver
#                   URL         would be copied to    FacadeURL
#                   UserName    would be copied to    FacadeUSerName
#                   Password    would be copied to    FacadePassword
#
#
# These properties are not required.
#
# FacadeDriver=com.databasecompany.TheirDriver
# FacadeURL=jdbc:driver://hostname/databasename
# FacadeUserName=databaseusername
# FacadePassword=databaseuserpassword
#
# FacadeDriver=com.mysql.jdbc.Driver
# FacadeURL=jdbc:mysql://localhost/soup
#
# FacadeDriver=com.inet.tds.TdsDriver
# FacadeURL=jdbc:inetdae7://localhost/webdata
# FacadeUserName=megacorp
# FacadePassword=spoooooon
#
# FacadeJNDI=java:comp/env/jdbc/DataSource


# Jenny will generate mocks for all of her generated classes to help you with your unit testing.  All you need to do
# is to tell Jenny where you want the mock files to be put.  Most folks put their unit test code in a different
# directory and give it the same package name.  So above you may have specified "/java/src/com/javaranch/db/soup/" for
# the destination directory, and "com.javaranch.db.soup" for the package.  So all of your production code source is kept
# in /java/src.  If you keep your unit test code in /java/test, you would want to set your MockDestination to
# "/java/test/com/javaranch/db/soup/".
#
# This property is not required.  If you don't provide it, no mock code is generated.
#
# MockDestination=/java/test/com/javaranch/db/soup/

MockDestination=/java/test/com/javaranch/db/soup/

# One of the cornerstones of modern RDB development is the table ID.  This is almost always a unique integer.
# Unfortunately, different database vendors have different ways of generating these values.  Usually, your
# business need is that you insert a new row and work with the new ID.  For most databases, this requires two
# database calls, although with some fancy dancing, you can squeeze it to one.  (some databases require you to get
# the value and then you can do an insert (two database hits).  Other databases will come up with the value when you do
# the insert and then you need to do a select to find out what that value was(two database hits).)
#
# The High/Low Pattern resolves this problem.  The principle is that there is a table in the database that stores the "High"
# portion of the unique identifier for each table, combined with a modulo value.  Then a singleton on each server
# (including each server in a cluster) can grab a "high" from that table and then dole out several unique ID's before
# getting another "High".  Suppose a singleton gets a "High" of 444 and a modulo value of 1000.  The singleton could
# return 444000 as a unique ID for the first unique ID request.  Then 444001, 444002, etc.  If the singleton doles out
# 444999 and then gets another request for a unique ID, it gets a new "High" value.  This time it might get back 454 and
# then return 454000.  The skip in values represents other servers that are also doling out unique ID's.
#
# The benefit to the High/Low Pattern is speed and portability.  The speed comes from half as many database hits.
# The portability comes from not using the database specific way of generating unique ID's.
#
# The downside is that any program that inserts rows and doesn't use this algorithm can cause non-unique ID's to be
# generated.  If you have complete control over all access to these tables, you'll be fine.  One other consideration is
# for your DBA.  One of the beautiful things about having a DBA is that if you change your schema for production, your
# DBA will mash your old data to your new schema.  But the High/Low algorithm can present some challenges at mashing
# time.  Nothing too bad, but enough extra complexity that the the odds of forgetting something is increased.
#
# Naturally, the only tables impacted by this issue are those that require a unique ID.
#
# Most folks prefer to use the High/Low pattern, so it is used as the default.  You have the option of turning it off
# with the following property:
#
# UseHighLowPattern=false


# Some databases support "spatial data".  Don't turn this on unless you know you are using it!
#
# UseSpatial=true

#####################################################################################################
####                                                                                              ###
####                               Generating Table Specific Code                                 ###
####                                                                                              ###
#####################################################################################################


# For each table, you can specify which column is the integer ID column, or you can specify what is the exact type
# of a column.
#
# If your table name is Video and you have an integer column named "ID", "VideoID" or "VIDEO_ID", Jenny will assume
# that this is the primary key and will provide a collection of convenience methods based on this id.  But!  IF your
# column name is something like "SerialNumber" you can specify "Video.ID=SerialNumber" and Jenny will use that
# as the ID column - thus providing the same convenience methods but for the column named "SerialNumber".
# Note that the column must be "NOT NULL" and of an integer type!
#
# Video.ID=SerialNumber
# Employee.ID=EmpID

# Spatial columns (skip this if you aren't using spatial or if you don't know what it is)
#
# When using Oracle spatial, the column type is the same whether you're storing a point there or a multipolygon.
# Jenny needs to know the type:  point, polygon or multipolygon.  TableName.ColumnName=SpatialType.
#
# WARNING!  This is case sensitive.  If you say the table name is "zip_code" and your database says the
# table name is "ZIP_CODE", they won't be matched!  (HINT:  Oracle likes to force everything to uppercase)
#
# ZipCode.Boundary=polygon
# ZIP_CODE.POST_OFFICE_LOCATION=point
# Island.Boundary=multipolygon



    


